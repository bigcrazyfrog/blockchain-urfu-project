"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import "./styles.css";
import { BrowserProvider, Contract, keccak256 } from "ethers";

const abi = [
  "function registerDiploma(bytes32 diplomaHash, string memory studentName) external",
  "event DiplomaRegistered(bytes32 indexed diplomaHash, address indexed issuer)",
];
const contractAddress = process.env.NEXT_PUBLIC_CONTRACT_ADDRESS;

export default function DiplomaRegister() {
  const [isLoading, setIsLoading] = useState(false);
  const [isSuccess, setIsSuccess] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [txHash, setTxHash] = useState<string | null>(null);
  const [fileName, setFileName] = useState<string>("");
  const router = useRouter();

  const [studentName, setStudentName] = useState("");
  const [hash, setHash] = useState("");

  if (!contractAddress) return null;

  const register = async () => {
    try {
      console.log("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–∏–ø–ª–æ–º–∞...");
      setIsLoading(true);
      setError(null);
      setIsSuccess(false);
      setTxHash(null);

      if (!window.ethereum) {
        throw new Error("MetaMask –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
      }

      console.log("–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MetaMask");
      const provider = new BrowserProvider(window.ethereum);
      const signer = await provider.getSigner();

      console.log("–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É");
      const contract = new Contract(contractAddress, abi, signer);

      const tx = await contract.registerDiploma(hash, studentName);

      console.log("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, —Ö—ç—à:", tx.hash);
      setTxHash(tx.hash);

      console.log("–û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...");
      await tx.wait();

      console.log("–î–∏–ø–ª–æ–º —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");
      setIsSuccess(true);

      router.push("/success");
    } catch (err: any) {
      console.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", err);
      setError(err.reason || err.message || "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
    } finally {
      setIsLoading(false);
    }
  };

  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) {
      setFileName("");
      return;
    }

    setFileName(file.name);

    try {
      const arrayBuffer = await file.arrayBuffer();
      const bytes = new Uint8Array(arrayBuffer);
      const fileHash = keccak256(bytes);
      console.log("üìÑ PDF-—Ö—ç—à:", fileHash);
      setHash(fileHash);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:", err);
      setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ PDF-—Ñ–∞–π–ª–∞");
    }
  };

  return (
    <div className="container">
      <div className="card">
        <h1 className="title">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –¥–∏–ø–ª–æ–º–∞</h1>
        <div className="form-group">
          <label htmlFor="course-name" className="form-label">
            –ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞
          </label>
          <input type="text" id="course-name" className="form-input" placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞" />
        </div>

        <div className="form-group">
          <label htmlFor="recipient" className="form-label">
            –ö–æ–º—É –≤—ã–¥–∞–µ—Ç—Å—è
          </label>
          <input
            type="text"
            id="recipient"
            className="form-input"
            placeholder="–§–ò–û —Å—Ç—É–¥–µ–Ω—Ç–∞"
            value={studentName}
            onChange={e => setStudentName(e.target.value)}
          />
        </div>

        <div className="form-group">
          <label htmlFor="completion-date" className="form-label">
            –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫—É—Ä—Å–∞
          </label>
          <input type="date" id="completion-date" className="form-input" />
        </div>

        <div className="form-group">
          <label htmlFor="diploma-file" className="form-label">
            –ó–∞–≥—Ä—É–∑–∏—Ç—å PDF —Ñ–∞–π–ª –¥–∏–ø–ª–æ–º–∞
          </label>
          <div className="file-upload">
            <input
              type="file"
              id="diploma-file"
              accept="application/pdf"
              className="file-input"
              onChange={handleFileUpload}
            />
            <label htmlFor="diploma-file" className="file-label">
              <svg className="file-icon" viewBox="0 0 24 24" width="24" height="24" fill="currentColor">
                <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8l-6-6z" />
                <path d="M14 2v6h6M12 18v-6M9 15h6" />
              </svg>
              <span>{fileName || "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª"}</span>
            </label>

            {fileName == "" && <span className="file-name">–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω</span>}
          </div>
        </div>
        <button className="submit-btn" onClick={register} disabled={isLoading}>
          {isLoading ? "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è..." : "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∏–ø–ª–æ–º"}
        </button>
      </div>
      {isSuccess && (
        <div style={{ marginTop: "20px", color: "green" }}>
          <p>‚úÖ –î–∏–ø–ª–æ–º —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!</p>
          {txHash && <p>–•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {txHash}</p>}
        </div>
      )}
      {error != null && (
        <div className="error-container" id="error-container">
          <div className="error-content">
            <svg className="error-icon" viewBox="0 0 24 24" width="24" height="24" fill="currentColor">
              <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z" />
            </svg>
            <p className="error-message" id="error-message">
              –û—à–∏–±–∫–∞: {error}
            </p>
          </div>
        </div>
      )}
    </div>
  );
}
